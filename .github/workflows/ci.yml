name: CI
on:
  push:
    branches:
      - master
    tags:
      - v*
  pull_request:
    branches:
      - master

env:
  CARGO_TERM_COLOR: always
permissions:
  contents: write

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Rust Cache
        uses: actions/cache@v3
        continue-on-error: false
        with:
          path: |
              ~/.cargo/bin/
              ~/.cargo/registry/index/
              ~/.cargo/registry/cache/
              ~/.cargo/git/db/
              target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
      - name: Install dependencies
        run: npm ci
      - name: Build frontend
        run: npm run build
      - name: Build backend
        run: cargo build --verbose
      - name: Cargo clippy
        run: cargo clippy --verbose -- -D warnings
      - name: Cargo fmt
        run: cargo fmt -- --check
  release:
    needs: lint
    # Build rust binary on linux-musl, linux-glibc, macos, and windows
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
      fail-fast: false
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Rust Cache
        uses: actions/cache@v3
        continue-on-error: false
        with:
          path: |
              ~/.cargo/bin/
              ~/.cargo/registry/index/
              ~/.cargo/registry/cache/
              ~/.cargo/git/db/
              target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
      - name: Install dependencies
        run: npm ci
      - name: Build frontend
        run: npm run build
      - name: Build backend
        run: cargo build --verbose --release
      # Package the binary + assets
      # binary: /target/release/k-librarian.exe
      # assets: /assets/
      - name: Package
        # Do not run in windows
        if: matrix.os != 'windows-latest'
        run: |
          mkdir -p /tmp/k-librarian
          cp target/release/k-librarian /tmp/k-librarian/
          cp -r assets /tmp/k-librarian/
          zip -r k-librarian-${{ runner.os }}.zip /tmp/k-librarian
      - name: Package (Win32)
        # Only run in windows, use win32 pathing
        if: matrix.os == 'windows-latest'
        run: |
          mkdir -p final
          cp target/release/k-librarian.exe final/
          cp -r assets final/
          cd final
          Compress-Archive -Path * -DestinationPath ../k-librarian-win_x86-64.zip
          cd ..
      # Upload the binary + assets
      - name: Upload
        uses: actions/upload-artifact@v4
        if: matrix.os != 'windows-latest'
        with:
          name: k-librarian-${{ matrix.os }}
          path: |
            /tmp/k-librarian/k-librarian*
            /tmp/k-librarian/assets
      - name: Upload (Win32)
        uses: actions/upload-artifact@v4
        if: matrix.os == 'windows-latest'
        with:
          name: k-librarian-${{ matrix.os }}
          path: |
            final/k-librarian*
            final/assets
      - name: Release
        uses: softprops/action-gh-release@v1
        # Run only on tags
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: |
            k-librarian-${{ runner.os }}.zip
          draft: false
          prerelease: false
          token: ${{ secrets.GITHUB_TOKEN }}
          generate_release_notes: true
      - name: Release (Win32)
        uses: softprops/action-gh-release@v1
        # Run only on tags
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: |
            k-librarian-win_x86-64.zip
          draft: false
          prerelease: false
          token: ${{ secrets.GITHUB_TOKEN }}
          generate_release_notes: true